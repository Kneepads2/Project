@model IEnumerable<ENTP_Project.Models.WorkoutModel>
@{
    Layout = "~/Views/Shared/_AppLayout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
    <head>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
        <style>
            .grid-container {
                display: grid;
                grid-template-columns: repeat(3, 1fr); 
                gap: 20px; 
                padding: 20px;
            }

            .container {
                background-color: #f9f9f9;
                border: 1px solid #ddd;
                padding: 20px;
                box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
                border-radius: 10px;
                text-align: center;
                font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
                height: auto;
                display: flex;
                flex-direction: column;              
                justify-content: space-evenly;
            }

            .container img {
                width: 100%;
                height: 50%;
                max-width: 90%;
                max-height: 50%; 
                object-fit: contain; 
                text-align: center;
                border-radius: 8px; 
                margin-top: 10px;
            }

            .container h3 {
                text-align: left;
                font-size: 20px;
            }

            @@media (max-width: 900px) {
                .grid-container {
                    grid-template-columns: repeat(2, 1fr); 
                }
            }

            @@media (max-width: 600px) {
                .grid-container {
                    grid-template-columns: 1fr; 
                }
            }

            .create {
                background-color: dodgerblue;
                margin: 20px 20px 0px 20px;
                font-size: 20px;
                font-weight: bold;
                box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
                border-radius: 15px;
                display: block;
                width: fit-content;
            }

            .button-container {
                text-align: center;
                display: flex;
                justify-content: flex-end; 
            }

            .button-container a {
                text-decoration: none;
                color: white;
                font-size: 18px;
                padding: 2px 10px;
            }

            .btn {
                border: none;
                color: white;
                padding: 12px 16px;
                font-size: 16px;
                cursor: pointer;
            }

                .btn:hover {
                    background-color: whitesmoke;
                }

            .buttons {
                text-align: right;
            }

        .image-link {
            display: block;
            width: 100%;
        }

            .image-link img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                border-radius: 8px;
            }
        </style>
    </head>
    <body>
        <div class="section">
            <div class="button-container">
                @if (ViewData["UserRole"]?.ToString() == "Coach/Trainer" || ViewData["UserRole"]?.ToString() == "Admin")
                {
                    <a href="/Workouts/CreateWorkout" class="create">Create New Workout</a>
                }
            </div>
            
            <div class="grid-container">
                @foreach (var workout in Model)
                {
                    <div class="container">
                        <h1>@workout.Title</h1>
                        <a href="@Url.Action("ViewWorkout", "Workouts", new { workoutId = workout.Id })" class="image-link">
                            <img src="@workout.ImageUrl" alt="workout image" />
                        </a>
                        <h3><b>Instructor: </b>@workout.Instructor</h3>
                        <h3><b>Difficulty: </b> @workout.Difficulty</h3>
                        <h3><b>Plan: </b>@workout.Plan</h3>
                        <div class="buttons">
                         <button style="background-color:deepskyblue; float: left; padding: 12px 24px; font-weight: bold;" class="btn btn-add" data-workout-id="@workout.Id"><i class="fa fa-plus"></i> Add</button>
                            @if (ViewData["UserRole"]?.ToString() == "Coach/Trainer" || ViewData["UserRole"]?.ToString() == "Admin")
                            {
                                <form method="get" asp-action="EditWorkout" asp-route-id="@workout.Id" style="display:inline;">
                                    <button style="background-color: dodgerblue;" class="btn">
                                        <i class="fa fa-edit"></i>
                                    </button>
                                </form>
                                <form method="post" asp-action="DeleteWorkout" asp-route-id="@workout.Id" style="display: inline;">
                                    <button style="background-color: red;" class="btn" onclick="return confirm('Are you sure you want to delete this workout?');">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    <script>
                async function addToLibrary(workoutId) {
            try {
                const response = await fetch(`/Workouts/AddToLibrary`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ workoutId }) // Use JSON to send the workoutId
                });

                if (response.ok) {
                    const result = await response.json();
                    alert(result.message);
                } else {
                    const error = await response.text();
                    alert(`Failed to add workout: ${error}`);
                }
            } catch (error) {
                console.error("Error adding workout:", error);
                alert("An error occurred.");
            }
        }

        // Attach event listeners
        document.querySelectorAll('.btn-add').forEach(button => {
            button.addEventListener('click', function () {
                const workoutId = this.dataset.workoutId;
                addToLibrary(workoutId);
            });
        });
    </script>
    </body>
</html>
